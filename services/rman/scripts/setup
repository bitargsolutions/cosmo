#!/usr/bin/env node

import fs from "node:fs";
import path from "node:path";
import { execSync } from "node:child_process";

const RMAN_DIR = path.resolve(import.meta.dirname, "..");
const COSMO_DIR = path.resolve(import.meta.dirname, "..", "..", "..");

/*
 * Summary:
 *  - Setup init.sql
 *  - Compile typescript
 */

var defs = {
	COSMO_LOGGER: process.env?.COSMO_LOGGER,
	MODE: process.env?.MODE,
	MARIADB_HOST: process.env?.MARIADB_HOST,
	MARIADB_DATABASE: process.env?.MARIADB_DATABASE,
	MARIADB_USER: process.env?.MARIADB_USER,
	MARIADB_PASSWORD: process.env?.MARIADB_PASSWORD,
	MARIADB_ROOT_PASSWORD: process.env?.MARIADB_ROOT_PASSWORD,
	SECRET_KEY: process.env?.SECRET_KEY
};

function checkMode() {
	const supportedModes = ["dev", "prod"];
	return supportedModes.includes(defs.MODE);
}

function setupSQL() {
	if (defs.SECRET_KEY?.length !== 128) {
		console.log("env: SECRET_KEY is not valid");
		return process.exit(1);
	}

	const initPath = path.resolve(RMAN_DIR, "misc");

	const srcInit = path.resolve(initPath, "init.template.sql");
	const dstInit = path.resolve(initPath, "init.sql");

	const content = fs.readFileSync(srcInit, { encoding: "utf-8" });
	const newContent =
		`-- THIS FILE WAS AUTOGENERATED. MODIFICATION MAY BE OVERWRITTEN.\n\n${content}`.replaceAll(
			"#SECRET_HASH#",
			defs.SECRET_KEY
		);

	fs.writeFileSync(dstInit, newContent);
}

function buildProject() {
	const response = execSync("yarn rman:build", {
		encoding: "utf-8",
		cwd: COSMO_DIR
	});

	console.log({ response });
}

function main() {
	if (!checkMode()) {
		console.log("env: MODE is not valid. Must be: dev, prod");
		return;
	}

	setupSQL();
	buildProject();
}

main();
